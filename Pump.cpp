// File: Pump.cpp
// 
// Date: 24.12.14 17:11
// 
// Generated by: Idatto, version 1.3
// 
// Description:



//TODO
/*
 * 1. clean up code.
 * 2. check return values of functions
 * 3.
 * 4.
 * 5.
 * 6. refactor code. especially code that is redundant.
 * 7. test pump.
 * 8. check for TODOs.
 * 9. check methods for correctness.
 * A.
 * B. see TODO tags!
 * C. setter and getter for all attributes! <--- auto generated!
 * D. fill getter and setter with life!
 * E.
 * F.
 * 0.
 */

#include "Pump.h"
#include "UserInterface.h"

#include <iostream>

#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <string.h>
#include <unistd.h>
#include <QObject>

using namespace std;

#define BUFLEN  100 //<---- sizeof(struct)

int     i;
int     main (void);
int     fdes_body_to_pump; // fildescriptor for Body --> Pump
int     fdes_pump_to_body; // fildescriptor for Pump --> Body


/**********************************
 * transmit_hormone_injection      *
 **********************************/
struct transmit_injection_hormones {
    int injected_insulin;
    int injected_glucagon;
} Injecting;

/**********************************
 * transmit_bloodsugar      *
 **********************************/
struct transmit_bloodsugar {
    int bloodSugarLevel;
} BodyStatus;


/**
 * @brief   Pump::readBloodSugarSensor
 *          Reads the current blood sugar level via pipe from body
 *
 * @return  the current blood sugar level
 */
int Pump::readBloodSugarSensor()
{
    int result;

    // open pipe Body --> Pump
    if((fdes_body_to_pump=open("body_to_pump",O_RDONLY))==(-1)) {
        printf("Failure 'open pipe'");
        exit(-1);
    }

    // read Body --> Pump
    read(fdes_body_to_pump, &BodyStatus, BUFLEN);
    result = BodyStatus.bloodSugarLevel;
    close(fdes_body_to_pump);

    return result;
}


/**
 * @brief   Pump::injectHormoneToBody
 *          Injects the calculated amount of hormones to the body via pipe
 *
 * @param   amount
 *          the amount of hormones to inject
 *
 * @param   insulin
 *          true if insulin, false if glucagon
 *
 * @return  true if anything is ok
 */
bool Pump::injectHormoneToBody(int amount, bool insulin)
{
    // open pipe Pump --> Body
    if((fdes_pump_to_body=open("pump_to_body",O_WRONLY))==(-1)) {
        printf("Failure 'open pipe'");
        return false;
    }

    if (insulin)
    {
        Injecting.injected_insulin = amount;
        Injecting.injected_glucagon = 0;
    }
    else
    {
        Injecting.injected_insulin = 0;
        Injecting.injected_glucagon = amount;
    }

    // write Pump --> Body
    if((i=write(fdes_pump_to_body, &Injecting, BUFLEN)) != BUFLEN) {
        printf("Fehler 'write-call'");
        exit(EXIT__FAILURE);
    }
    close(fdes_pump_to_body);
    return true;
}


/**
 * @brief   Pump::injectHormone
 *          Injects either insulin or glucagon into the body.
 *
 * @param   amount
 *          the amount of FU to be injected
 *
 * @param   insulin
 *          true if the hormone to inject is insulin, false if it is glucagon
 *
 * @return  false if injection failed.
 */
bool Pump::injectHormone(int targetBloodSugarLevel, bool insulin, int amount)
{   
    // inject to body
    if (injectHormoneToBody(amount, insulin))
    {
        // call gui
        if (insulin)
        {
            emit updateBloodSugarLevel(targetBloodSugarLevel, UserInterface::INSULIN, amount);
            return true;
        } else
        {
            emit updateBloodSugarLevel(targetBloodSugarLevel, UserInterface::GLUCAGON, amount);
            return true;
        }

        QString err = "Injection aborted! No GUI detected";
        tracer.writeCriticalLog(err);
        return false;
    }
    else
    {
        QString err = "Injection aborted! No body detected!";
        tracer.writeCriticalLog(err);
        return false;
    }
}


/**
 * @brief   Pump::decreaseHormoneLevel
 *          Decreases the hormone level in either the insulin or the glucagon reservoir
 *
 * @param   amount
 *          the amount by that the reservoir is reduced
 *
 * @param   insulin
 *          true if the hormone is insulin, false if it is glucagon
 *
 * @return  true if a decrease happened.
 */
bool Pump::decreaseHormoneReservoire(int amount, bool insulin)
{
    QString str_hormone, str_insulin="Insulin", str_glucagon="Glucagon";
    QString err = "Reservoir "+ str_hormone +" too low!";

    //set str_hormone to "Insulin" or "Glucagon". ternary operator!
    str_hormone = insulin? str_insulin : str_glucagon;

    if (insulin)
    {
        if (amount <= this->getInsulinReservoirLevel() && amount!=0)
        {
            insulinReservoirLevel -= amount;
            emit updateInsulinReservoir(insulinReservoirLevel);
            return true;
        }
    }
    else
    {
        if (amount <= this->getGlucagonReservoirLevel() && amount !=0)
        {
            glucagonReservoirLevel -= amount;
            emit updateGlucagonReservoir(glucagonReservoirLevel);
            return true;
        }
    }
    tracer.writeCriticalLog(err);
    return false;
}


/**
 * @brief Pump::checkPumpBatteryStatus
 *        checks battery status of pump. emits warning on battery status below 15%
 * @return 1 on failed call.
 */
int Pump::checkPumpBatteryStatus(void)
{
    QString warn = "WARNING! Battery low! Charge at: " + batteryPowerLevel;
    if(this->getBatteryPowerLevel()<=15)
    {
        tracer.writeWarningLog(warn);
    }
    return EXIT_FAILURE;
}


/**
 * @brief   Pump::calculateNeededHormone
 *          calculates the amount of hormones to inject
 *
 * @param   targetBloodSugarLevel
 *          the blood sugar level that should be reached
 *
 * @return  units of hormone to inject into body
 */
int Pump::calculateNeededHormone(int targetBloodSugarLevel)
{
    int difference; int fictHormUnit;
    difference = abs(currentBloodSugarLevel - targetBloodSugarLevel);
    fictHormUnit = ceil(difference / hormoneSensitivityFactor);
    return fictHormUnit;
}


/**
 * @brief   Pump::runPump
 *          gets triggered by scheduler every once in a while
 *
 * @return  true on exit if everything is ok.
 */
bool Pump::runPump()
{
    latestBloodSugarLevel = currentBloodSugarLevel;
    currentBloodSugarLevel = getCurrentBloodSugarLevel();
    int hormonesToInject;

    // inject insulin
    if (currentBloodSugarLevel > maxBloodSugarLevel)
    {
        if (currentBloodSugarLevel > latestBloodSugarLevel)
        {
            insulin = true;
            if (delay)
            {
                hormonesToInject = calculateNeededHormone(latestBloodSugarLevel);
            }
            else
            {
                hormonesToInject = calculateNeededHormone(upperTargetBloodSugarLevel);
            }
        }
    }
    // inject glucagon
    else if (currentBloodSugarLevel < minBloodSugarLevel)
    {
        if (currentBloodSugarLevel < latestBloodSugarLevel)
        {
            insulin = false;
            if (delay)
            {
                hormonesToInject = calculateNeededHormone(latestBloodSugarLevel);
            }
            else
            {
                hormonesToInject = calculateNeededHormone(lowerTargetBloodSugarLevel);
            }
        }
    }
    // inject nothing
    else
    {
        hormonesToInject = 0;
    }

    return injectHormone(targetBloodSugarLevel, insulin, hormonesToInject);
}



// GETTER
/*
 * Checks the battery status and returns the value in percent.
 * In case of a critical status (level smaller than 15%) the user will be
 * notified acoustically and the incident will be logged by the tracer.
 */
/**
 * @brief Pump::getBatteryPowerLevel
 * @return current battery status.
 */
int Pump::getBatteryPowerLevel() const
{
    return this->batteryPowerLevel;
}

/*
 * Checks the entire pump (reservoir, mechanical parts) and returns “true” when
 * everything is working fine.
 */
bool Pump::getPumpStatus() const
{
    return true;
}

/*
 * Return the target blood sugar level.
 */
int Pump::getTargetBloodSugarLevel() const
{
    return this->targetBloodSugarLevel;
}

/*
 * Checks the blood sugar concentration and returns the value.
 * Returns current blood sugar level.
 */
/**
 * @brief Pump::getCurrentBloodSugarLevel
 * @return current blood sugar level.
 */
int Pump::getCurrentBloodSugarLevel() const
{
   return this->currentBloodSugarLevel;
}

/*
 * Returns the insulin level in the reservoir.
 */
/**
 * @brief Pump::getInsulinReservoirLevel
 * @return insulinLevel of reservoir
 */
int Pump::getInsulinReservoirLevel() const
{
    return this->insulinReservoirLevel;
}

/*
 * Returns the glucagon level in the reservoir.
 */
/**
 * @brief Pump::getGlucagonReservoirLevel
 * @return
 */
int Pump::getGlucagonReservoirLevel() const
{
    return this->glucagonReservoirLevel;
}

//>>>> auto generated getter
int Pump::getLowerTargetBloodSugarLevel() const
{
    return lowerTargetBloodSugarLevel;
}

int Pump::getUpperTargetBloodSugarLevel() const
{
    return upperTargetBloodSugarLevel;
}

int Pump::getMinBloodSugarLevel() const
{
    return minBloodSugarLevel;
}

int Pump::getMaxBloodSugarLevel() const
{
    return maxBloodSugarLevel;
}

int Pump::getLatestBloodSugarLevel() const
{
    return latestBloodSugarLevel;
}

int Pump::getActive() const
{
    return active;
}

int Pump::getHormoneSensitivityFactor() const
{
    return hormoneSensitivityFactor;
}

bool Pump::getDelay() const
{
    return delay;
}

bool Pump::getInsulin() const
{
    return insulin;
}
// END GETTER

// SETTER
/*
 * recharge battery.
 */
/**
 * @brief Pump::rechargeBatteryPower
 * @param charge
 */
void Pump::rechargeBatteryPower(int charge)
{
    QString err = "Insufficient Power! Battery not charged!";
    if(charge >=batteryPowerLevel && charge <= MAX_BATTERY_CHARGE)
    {
        //TODO! <- check for correctness.
        this->batteryPowerLevel = charge;
    }
    tracer.writeCriticalLog(err);
}

/*
 * drains power from battery.
 */
/**
 * @brief Pump::setBatteryPowerLevel
 * @param powerdrain
 */
void Pump::setBatteryPowerLevel(int powerdrain)
{
    QString err = "Power drainage too high!";

    if(powerdrain>0 && powerdrain<=batteryPowerLevel)
    {
        //TODO! <- check for correctness.
        batteryPowerLevel-=powerdrain;
    }
    tracer.writeCriticalLog(err);
}

/*
 * set target blood sugar level.
 */
/**
 * @brief Pump::setTargetBloodSugarLevel
 * @param tbsl  int-value for target blood sugar level.
 */
void Pump::setTargetBloodSugarLevel(int tbsl)
{
    QString err = "Target Blood Sugar Level not within limits!";

    if(tbsl>70 && tbsl<120)
    {
        this->targetBloodSugarLevel=tbsl;
    }
    tracer.writeCriticalLog(err);
}

/*
 * refills insulin and returns “true” when done
 */
/**
 * @brief Pump::refillInsulin
 */
void Pump::refillInsulinReservoir()
{
    // Update UI
    emit updateInsulinReservoir(100);
}

/*
 * refills glucagon and returns “true” when done
 */
/**
 * @brief Pump::refillGlucagon
 */
void Pump::refillGlucagonReservoir()
{
    // Update UI
    emit updateGlucagonReservoir(100);
}

//>>>> auto generated setter
void Pump::setHormoneSensitivityFactor(int value)
{
    hormoneSensitivityFactor = value;
}

void Pump::setDelay(bool value)
{
    delay = value;
}

void Pump::setInsulin(bool value)
{
    insulin = value;
}

void Pump::setActive(int value)
{
    active = value;
}

void Pump::setLowerTargetBloodSugarLevel(int value)
{
    lowerTargetBloodSugarLevel = value;
}

void Pump::setUpperTargetBloodSugarLevel(int value)
{
    upperTargetBloodSugarLevel = value;
}

void Pump::setLatestBloodSugarLevel(int value)
{
    latestBloodSugarLevel = value;
}

void Pump::setMaxBloodSugarLevel(int value)
{
    maxBloodSugarLevel = value;
}

void Pump::setMinBloodSugarLevel(int value)
{
    minBloodSugarLevel = value;
}
// END SETTER
