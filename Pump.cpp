// 
// File: Pump.cpp
// 
// Date: 24.12.14 17:11
// 
// Generated by: Idatto, version 1.3
// 
// Description:


//TODO
/*
 * 1. clean up code.
 * 2. summarize decreaseInsulin and decreaseGlucagon into one. -> done
 * 3. summarize injectInsulin and injectGlucagon into one. -> done
 * 4. code runable and rest of methods.
 * 5. test calculateNeededHormone for non-empty wrong value strings. -> done
 * 6. refactor code. especially code that is redundant.
 * 7. test pump.
 * 8. check for TODOs.
 * 9. check methods for correctness.
 * A.
 * B. see TODO tags!
 * C. setter and getter for all attributes! <--- auto generated!
 * D. fill getter and setter with life!
 * E.
 * F.
 * 0.
 */

#include "Pump.h"
#include "UserInterface.h"

#include <iostream>

#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <string.h>
#include <unistd.h>
#include <QObject>

using namespace std;

#define BUFLEN  100 //<---- sizeof(struct)

int     i;
int     main (void);
int     fdes_body_to_pump; // fildescriptor for Body --> Pump
int     fdes_pump_to_body; // fildescriptor for Pump --> Body


// STRUCTS

/**********************************
 * transmit_hormone_injection      *
 **********************************/

struct transmit_injection_hormones {
    int injected_insulin;
    int injected_glucagon;
} Injecting;

/**********************************
 * transmit_bloodsugar      *
 **********************************/

struct transmit_bloodsugar {
    int bloodSugarLevel;
} BodyStatus;

//END STRUCTS

// FUNCTIONS
/* Injects either insulin or glucagon into the body.
 *
 * Parameters:
 * - amount : int       the amount of FU to be injected
 * - insulin : bool     true if the hormone to inject is insulin, false if it is glucagon
 *
 */
/**
 * @brief Pump::injectHormone
 * @param amount
 * @param insulin
 * @return true if injection was ok.
 */
bool Pump::injectHormone(int targetBloodSugarLevel, bool insulin, int amount)
{
    QString err = "Injection aborted! No Hormone injected!";
    if (insulin)
    {
        // inject insulin here
        emit updateBloodSugarLevel(targetBloodSugarLevel, UserInterface::INSULIN, amount);
    } else
    {
        // inject glucagon here
        emit updateBloodSugarLevel(targetBloodSugarLevel, UserInterface::GLUCAGON, amount);
    }
    tracer.writeCriticalLog(err);
    return true;
}

// >>>>>>>>>>>>>>> TODO: refactor this -v- <<<<<<<<<<<<<<<<<<<<<
// >>>>>>>>>>>>>>> how? <<<<<<<<<<<<<<<<<<<<<
/* Decreases the hormone level in either the insulin or the glucagon reservoir
 *
 * Parameters:
 * - amount: the amount by that the reservoir is reduced
 * - insulin: true if the hormone is insulin, false if it is glucagon
 */
/**
 * @brief Pump::decreaseHormoneLevel
 * @param amount unit subtracted from reservoir.
 * @param insulin true if insulin, false if glucagon.
 * @return false if no decrease happened.
 */
bool Pump::decreaseHormoneLevel(int amount, bool insulin)
{
    QString str_hormone, str_insulin="Insulin", str_glucagon="Glucagon";
    QString err = "Reservoir "+ str_hormone +" too low!";

    //set str_hormone to "Insulin" or "Glucagon". ternary operator!
    str_hormone = insulin? str_insulin : str_glucagon;

    if (insulin)
    {
        if (amount <= this->getInsulinReservoirLevel() && amount!=0)
        {
            insulinReservoirLevel-=amount;
            emit updateInsulinReservoir(insulinReservoirLevel);
            return true;
        }
        tracer.writeCriticalLog(err);
        return false;
    }
    else
    {
        if (amount <= this->getGlucagonReservoirLevel() && amount !=0)
        {
            glucagonReservoirLevel-=amount;
            emit updateGlucagonReservoir(glucagonReservoirLevel);
            return true;
        }
        tracer.writeCriticalLog(err);
        return false;
    }
}


/* check Battery Status.
 */
int Pump::checkPumpBatteryStatus(void)
{
    QString warn = "WARNING! Battery low! Charge at: " + batteryPowerLevel;
    if(this->getBatteryPowerLevel()<=15)
    {
        tracer.writeWarningLog(warn);
    }
    return EXIT_FAILURE;
}

// >>>>>>>>>>>>>>> TODO: refactor this -v- <<<<<<<<<<<<<<<<<<<<<
/* author: Markus
 * BEGIN SOLUTION <<<<< meine bevorzugte loesung. mit sicherheit noch buggy!
 *
 * clean up! refactor code!
 */
/*  what happens with non-empty string with value other than insulin or glucagon?
 *
 * >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 * jenny: just take a bool named 'insulin': true if the hormone is insulin, false if glucagon.
 * worst thing to happen in case of a bug: insulin is false by default. blood sugar will get higher instead of lower.
 * not good in long term, but no bug will do good in long term.
 * <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 *
 * // TODO
 * we need to take care of the delay. insulin only has an effect after half an hour.
 * we need to take care of the long term effect. insulin will have an effect over max. 12 hrs
 *          -> how can we know/remember how much insulin there is in the blood circle?
 */
/* summarize and refactor method. return value only needs to be calculated from hsf, tBSL and cBSL.
 * absolute value for return. how to achieve?
 */
/* see header!
 */
/**
 * @brief Pump::calculateNeededHormone
 * @param targetBloodSugarLevel
 * @return units of hormone to inject into body
 */
int Pump::calculateNeededHormone(int targetBloodSugarLevel)
{
     QString err = "Error! No valid hormone found!";

    if(insulin)
    {
        return calcHormUnits(targetBloodSugarLevel);
    }

    else
    {
        return calcHormUnits(targetBloodSugarLevel);
    }

    tracer.writeCriticalLog(err);
    return EXIT_FAILURE;
}

/* calculate units of hormone taking absolute value of difference.
 */
/**
 * @brief Pump::calcHormUnits
 * @param targetBloodSugarLevel
 * @return calculated units of hormone, either insulin or glucagon.
 */
int Pump::calcHormUnits(int targetBloodSugarLevel)
{
    int difference; int fictHormUnit;
    difference = abs(currentBloodSugarLevel - targetBloodSugarLevel);
    fictHormUnit = difference / hormoneSensitivityFactor;
    return fictHormUnit;
}

/* END SOLUTION
 */
// END FUNCTIONS


// GETTER
/* Checks the battery status and returns the value in percent.
 * In case of a critical status (level smaller than 15%) the user will be
 * notified acoustically and the incident will be logged by the tracer.
 */
/**
 * @brief Pump::getBatteryPowerLevel
 * @return current battery status.
 */
int Pump::getBatteryPowerLevel() const
{
    return this->batteryPowerLevel;
}
/* Checks the entire pump (reservoir, mechanical parts) and returns “true” when
 * everything is working fine.
 */
bool Pump::getPumpStatus() const
{
    return true;
}

/* Return the target blood sugar level.
 */
int Pump::getTargetBloodSugarLevel() const
{
    return this->targetBloodSugarLevel;
}

/* Checks the blood sugar concentration and returns the value.
 * Returns current blood sugar level.
 */
/**
 * @brief Pump::getCurrentBloodSugarLevel
 * @return current blood sugar level.
 */
int Pump::getCurrentBloodSugarLevel() const
{
   return this->currentBloodSugarLevel;
}

/* Returns the insulin level in the reservoir.
 */
/**
 * @brief Pump::getInsulinReservoirLevel
 * @return insulinLevel of reservoir
 */
int Pump::getInsulinReservoirLevel() const
{
    return this->insulinReservoirLevel;
}

/* Returns the glucagon level in the reservoir.
 */
/**
 * @brief Pump::getGlucagonReservoirLevel
 * @return
 */
int Pump::getGlucagonReservoirLevel() const
{
    return this->glucagonReservoirLevel;
}

//>>>> auto generated getter
int Pump::getLowerTargetBloodSugarLevel() const
{
    return lowerTargetBloodSugarLevel;
}
int Pump::getUpperTargetBloodSugarLevel() const
{
    return upperTargetBloodSugarLevel;
}
int Pump::getMinBloodSugarLevel() const
{
    return minBloodSugarLevel;
}
int Pump::getMaxBloodSugarLevel() const
{
    return maxBloodSugarLevel;
}
int Pump::getLatestBloodSugarLevel() const
{
    return latestBloodSugarLevel;
}
int Pump::getActive() const
{
    return active;
}
int Pump::getHormoneSensitivityFactor() const
{
    return hormoneSensitivityFactor;
}
bool Pump::getDelay() const
{
    return delay;
}
bool Pump::getInsulin() const
{
    return insulin;
}
// END GETTER


// SETTER
/* recharge battery.
 */
/**
 * @brief Pump::rechargeBatteryPower
 * @param charge
 */
void Pump::rechargeBatteryPower(int charge)
{
    QString err = "Insufficient Power! Battery not charged!";
    if(charge >=batteryPowerLevel && charge <= MAX_BATTERY_CHARGE)
    {
        //TODO! <- check for correctness.
        this->batteryPowerLevel = charge;
    }
    tracer.writeCriticalLog(err);
}

/* drains power from battery.
 */
/**
 * @brief Pump::setBatteryPowerLevel
 * @param powerdrain
 */
void Pump::setBatteryPowerLevel(int powerdrain)
{
    QString err = "Power drainage too high!";

    if(powerdrain>0 && powerdrain<=batteryPowerLevel)
    {
        //TODO! <- check for correctness.
        batteryPowerLevel-=powerdrain;
    }
    tracer.writeCriticalLog(err);
}

/* set target blood sugar level.
 */
/**
 * @brief Pump::setTargetBloodSugarLevel
 * @param tbsl  int-value for target blood sugar level.
 */
void Pump::setTargetBloodSugarLevel(int tbsl)
{
    QString err = "Target Blood Sugar Level not within limits!";

    if(tbsl>70 && tbsl<120)
    {
        this->targetBloodSugarLevel=tbsl;
    }
    tracer.writeCriticalLog(err);
}

/* refills insulin and returns “true” when done
 */
/**
 * @brief Pump::refillInsulin
 */
void Pump::refillInsulinReservoir()
{
    // Update UI
    emit updateInsulinReservoir(100);
}

/* refills glucagon and returns “true” when done
 */
/**
 * @brief Pump::refillGlucagon
 */
void Pump::refillGlucagonReservoir()
{
    // Update UI
    emit updateGlucagonReservoir(100);
}

//>>>> auto generated setter
void Pump::setHormoneSensitivityFactor(int value)
{
    hormoneSensitivityFactor = value;
}
void Pump::setDelay(bool value)
{
    delay = value;
}
void Pump::setInsulin(bool value)
{
    insulin = value;
}
void Pump::setActive(int value)
{
    active = value;
}
void Pump::setLowerTargetBloodSugarLevel(int value)
{
    lowerTargetBloodSugarLevel = value;
}
void Pump::setUpperTargetBloodSugarLevel(int value)
{
    upperTargetBloodSugarLevel = value;
}
void Pump::setLatestBloodSugarLevel(int value)
{
    latestBloodSugarLevel = value;
}
void Pump::setMaxBloodSugarLevel(int value)
{
    maxBloodSugarLevel = value;
}
void Pump::setMinBloodSugarLevel(int value)
{
    minBloodSugarLevel = value;
}
// END SETTER


// RUNABLE
/* runable for Pump. Gets triggered by Scheduler.
 */
/**
 * @brief Pump::runPump
 * @return true on exit if everything is ok.
 */

bool Pump::runPump()
{
    latestBloodSugarLevel = currentBloodSugarLevel;
    currentBloodSugarLevel = getCurrentBloodSugarLevel();

    // inject insulin
    if (currentBloodSugarLevel > maxBloodSugarLevel)
    {
        if (currentBloodSugarLevel > latestBloodSugarLevel)
        {
            insulin = true;
            if (delay)
            {
                // TODO
                calculateNeededHormone(latestBloodSugarLevel);
            }
            else
            {
                // TODO
                calculateNeededHormone(upperTargetBloodSugarLevel);
            }
        }
    }

    // inject glucagon
    if (currentBloodSugarLevel < minBloodSugarLevel)
    {
        if (currentBloodSugarLevel < latestBloodSugarLevel)
        {
            insulin = false;
            if (delay)
            {
                // TODO
                calculateNeededHormone(latestBloodSugarLevel);
            }
            else
            {
                // TODO
                calculateNeededHormone(lowerTargetBloodSugarLevel);
            }
        }
    }

    // TODO!!
    return true;
} // END RUNABLE





