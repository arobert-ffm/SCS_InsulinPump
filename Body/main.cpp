//
// File: Body.cpp
//
// Date: 24.12.14 17:11
//
// Generated by: Idatto, version 1.3
//
// Description: Simulates a body suffering from diabetes and reacting to insulin and/or glucagon.

//
//  Body.cpp
//  Body
//
//  Created by Johannes Kinzig on 04.01.15.
//  Copyright (c) 2015 Johannes Kinzig. All rights reserved.
//

#include "Body.h"
#include <iostream>

#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/stat.h>
//#include <string.h>
#include <unistd.h>

#include <thread>

using namespace std;

#define BUFLEN          100
#define EXIT__FAILURE   -1

int     main                        (void);
int     communication_via_pipes     (void); // is working!
int     test_thread01               (void); // thread developed right now

int     fdes_body_to_pump; // fildescriptor for Body --> Pump
int     fdes_pump_to_body; // fildescriptor for Pump --> Body
int     i; // needed for communication over pipes








/****************************************************************
 *               used to store data for transmission             *
 *****************************************************************/

/**********************************
 * transmit_hormone_injection      *
 **********************************/
struct transmit_injection_hormones {
    float injected_insulin;
    float injected_glucagon;
} Injecting; // will be send over pipe: pump_to_body

/**********************************
 * transmit_bloodsugar      *
 **********************************/
struct transmit_bloodsugar {
    float bloodSugarLevel;
} BodyStatus; // will be send over pipe: body_to_pump
/****************************************************************
 *                          END transmission                    *
 ****************************************************************/


/****************************************************************
 *                      Class: Body                             *
 ****************************************************************/

// constructor
Body::Body(float BSL, int constant){
    BloodsugarLevel = BSL; // unit: mg/dL
    insulin_constant = constant; // unit: mg/dL sinking per iteration => one iteration estimated as 0.5 hours
};

// destructor
Body::~Body(void){
    
}

/******************************************************
 *   defined 3 levels for increasing/decreasing:      *
 *      Level 1: calm   --> 1.03                      *
 *      Level 2: middle --> 1.06                      *
 *      Level 3: fast   --> 1.09                      *
 ******************************************************/

bool Body::changeBloodSugarLevel(float strength, bool increasing, bool use_insulin_constant) {
    
    /**********************************
     * deciding if rising or falling  *
     **********************************/
    
    // rising
    if (increasing == true && use_insulin_constant == true) {
        // body factor influences BSL
        this->BloodsugarLevel = this->BloodsugarLevel * strength;
        
        // injected Insulin influences BSL per 0.5 hours
        this->BloodsugarLevel = this->BloodsugarLevel - this->insulin_constant;
    }
    else if (increasing == true && use_insulin_constant == false) {
        // body factor influences BSL
        this->BloodsugarLevel = this->BloodsugarLevel * strength;
    }

    // falling
    else if (increasing == false && use_insulin_constant == true) {
        // body factor influences BSL
        this->BloodsugarLevel = this->BloodsugarLevel / strength;
        
        // injected Insulin influences BSL per 0.5 hours
        this->BloodsugarLevel = this->BloodsugarLevel - this->insulin_constant; // injected Insulin influences BSL per 0.5 hours
    }
    
    else if (increasing == false && use_insulin_constant == false) {
        // body factor influences BSL
        this->BloodsugarLevel = this->BloodsugarLevel / strength;
    }
    return true;
}

/******************************************************
 *      declaring getter and setter methods           *
 *      for private var BloodsugarLevel               *
 ******************************************************/
void Body::setBloodSugarLevel(float BSL) {
    this->BloodsugarLevel = BSL;
}

float Body::getBloodSugarLevel() {
    return this->BloodsugarLevel;
}

/****************************************************************
 *                          END Body                            *
 ****************************************************************/

Body body(110.00, 5); // generate Body object



int main(void) {
    
    cout << "Start\n";
    
    thread first_thread(test_thread01);
    
    first_thread.join();
    
    cout << "End\n";
    return 0;
}

// simulating BSL - should be inside a seperate thread
int test_thread01(void) {
    cout << "\nThread started\n";
    /******************************************************
     *            Vars and values for testing             *
     ******************************************************/

    int FU = 5; // fictive units of insulin - just for testing in this case
    int iterations = 15;
    
    cout << "Init value for BloodSugarLevel: ";

    
    while (true) {
        if (FU > 0) {
            body.changeBloodSugarLevel(1.03, false, true);
            FU--; // just for testing in this case
        }
        
        else if (FU == 0) {
            body.changeBloodSugarLevel(1.03, false, false);
        }
        
        cout << body.getBloodSugarLevel();
        cout << "\n";
    }
    /******************************************************
     *                     END                            *
     ******************************************************/
    
    cout << "\nThread ended\n";
    return 0;
}

// communication via pipes
int communication_via_pipes (void) {
    
    BodyStatus.bloodSugarLevel = 29.00;
    
    // generate pipe for Body --> Pump
    mknod("body_to_pump",S_IFIFO | 0666,0);
    
    if((fdes_body_to_pump=open("body_to_pump",O_WRONLY))==(-1)) {
        puts("Fehler 'open pipe'");
        exit(EXIT__FAILURE);
    }
    
    // generate pipe for Pump --> Body
    mknod("pump_to_body",S_IFIFO | 0666,0);
    
    if((fdes_pump_to_body=open("pump_to_body",O_RDONLY))==(-1)) {
        puts("Fehler 'open pipe'");
        exit(EXIT__FAILURE);
    }
    
    // write Body --> Pump
    if((i=write(fdes_body_to_pump, &BodyStatus, BUFLEN)) != BUFLEN) {
        printf("Fehler 'write-call'");
        exit(EXIT__FAILURE);
    }
    close(fdes_body_to_pump);
    
    // read Pump --> Body
    read(fdes_pump_to_body, &Injecting, BUFLEN);
    cout << Injecting.injected_insulin;
    cout << "\n";
    cout << Injecting.injected_glucagon;
    cout << "\n";
    close(fdes_pump_to_body);
    
    exit(0);
    
} /* END_MAIN() */
