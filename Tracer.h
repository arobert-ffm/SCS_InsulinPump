// 
// File: Tracer.h
// 
// Date: 24.12.14 17:11
// 
// Generated by: Idatto, version 1.3
// 
// Description:


#ifndef tracer_
#define tracer_

#include <vector>
#include <QString>
#include <iostream>
#include <QObject>

using namespace std;


class Tracer : public QObject
{
    Q_OBJECT

    public:
        virtual string& getFilename();
        virtual void setFilename(string& value);

        // Writes the message to the log file. Every Message is signed by date 
        // and time. 
        // When writing to file has finished, “True” is returned!
        virtual bool writeStatusLog(string& message);
        // Writes the message to the log file. Every Message is signed by date 
        // and time. 
        // When writing to file has finished, “True” is returned!
        virtual bool writeWarningLog(string& message);
        // Writes the message to the log file. Every Message is signed by date 
        // and time. 
        // When writing to file has finished, “True” is returned!
        virtual bool writeCriticalLog(string& message);
        // Plays an acoustic sound and returns “True” when done
        virtual bool playAcousticWarning();
        // vibrates on a specific event and returns “True” when done
        virtual bool vibrationWarning();

    private:
        // The complete filename and path will stored here.
        string filename;

    signals:
        // Callback for writing status log in the UI.
        //
        // Parameter:
        // - The status log to insert
        void writeStatusLogInUi(string& message);
        // Callback for writing warning log in the UI.
        //
        // Parameter:
        // - The warning log to insert
        void writeWarningLogInUi(string& message);
        // Callback for writing critical log in the UI.
        //
        // Parameter:
        // - The critical log to insert
        void writeCriticalLogInUi(string& message);

};

#endif
